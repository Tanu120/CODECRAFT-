problem statement:- Depth-First Search (DFS) Sample Problem: Implement DepthFirst Search (DFS) to traverse a graph starting from a given vertex. The graph is represented by an adjacency list

# Recursive Approach
def dfs_recursive(graph, vertex, visited=None):
    if visited is None:
        visited = set()
    visited.add(vertex)
    for neighbor in graph[vertex]:
        if neighbor not in visited:
            dfs_recursive(graph, neighbor, visited)
    return list(visited)

# Iterative Approach with a Stack
def dfs_iterative(graph, vertex):
    visited = set()
    stack = [vertex]
    while stack:
        vertex = stack.pop()
        if vertex not in visited:
            visited.add(vertex)
            stack.extend(neighbor for neighbor in graph[vertex] if neighbor not in visited)
    return list(visited)

# Example Graph represented by an Adjacency List
graph = {
    'A': ['B', 'C'],
    'B': ['A', 'D', 'E'],
    'C': ['A', 'F'],
    'D': ['B'],
    'E': ['B', 'F'],
    'F': ['C', 'E']
}

# Example Usage
starting_vertex = 'A'
print("Recursive DFS:", dfs_recursive(graph, starting_vertex))
print("Iterative DFS:", dfs_iterative(graph, starting_vertex))
